{"version":3,"sources":["i18n/locale.ts","store/settings.ts","_debug/dataGenerator.ts","_debug/generateSurveys.ts","store/surveys.ts","store/root.ts","base/SettingsView.tsx","base/TopBar.tsx","base/CustomDatePicker.tsx","create-survey/CreateSurveyView.tsx","base/Loading.tsx","i18n/IntlWrapper.tsx","base/RelativeTimestamp.tsx","list-surveys/SurveyActions.tsx","list-surveys/surveyStatus.ts","list-surveys/SurveysTable.tsx","list-surveys/useDisplayableSurveys.ts","list-surveys/ListSurveysView.tsx","base/withSearchParameter.tsx","list-surveys/useStatusFilterConfigurator.tsx","list-surveys/useHideFilteredItemsConfigurator.tsx","serviceWorker.ts","index.tsx"],"names":["LOCALES","en","es","settingsSlice","createSlice","name","initialState","locale","reducers","settingsUpdateLocale","state","action","payload","actions","reducer","dataGenerator","Chance","now","Date","thisYear","getYear","numSurveys","natural","max","console","log","seed","output","i","tsUnlock","date","year","tsExpiry","addDays","tsCreated","subDays","guid","title","company","formatISO","isFuture","generateSurveys","surveysSlice","surveysCreateOne","uuidv4","surveysDeleteOne","updatedListOfSurveys","surveyId","surveysClearAll","rootReducer","combineReducers","settings","settingsReducer","surveys","surveysReducer","store","configureStore","selectAll","selectSettings","selectAllSurveys","SettingsView","formatMessage","useIntl","history","useHistory","activeLocale","useSelector","storeState","dispatch","useDispatch","style","padding","marginBottom","id","onBack","push","width","onChange","newLocale","value","Object","entries","map","localeKey","localeDescription","Option","key","danger","marginTop","onClick","overflow","backgroundColor","borderRadius","maxHeight","JSON","stringify","TopBar","Title","margin","display","justifyContent","alignItems","to","type","shape","icon","SettingOutlined","CustomDatePicker","generatePicker","dateFnsGenerateConfig","CreateSurveyView","React","titleValue","setTitleValue","startDate","setStartDate","endDate","setEndDate","fieldRequiredWarningMsg","onFinish","Item","label","rules","required","message","e","currentTarget","RangePicker","onCalendarChange","selectedRange","selectedStartDate","selectedEndDate","htmlType","Loading","loadLocaleMessages","IntlWrapper","children","messages","setMessages","a","loadedMessages","default","defaultLocale","onError","err","code","RelativeTimestamp","timestamp","emDash","tsRelative","setTsRelative","updateRelativeTimestamp","formatDistanceToNowStrict","addSuffix","interval","setInterval","clearInterval","formatRFC7231","SurveyActions","survey","status","size","DeleteOutlined","marginRight","disabled","visibility","_id","useSurveyStatusDescriptions","new","completed","visibilityWrapper","content","props","rowSpan","colSpan","opacity","StatusCell","tagIcon","surveyStatus","tagColor","tagMsg","SyncOutlined","spin","CheckCircleOutlined","color","SurveysTable","columns","dataIndex","render","record","_","rowKey","dataSource","scroll","x","bordered","useDisplayableSurveys","hideFiltered","hiddenStatuses","visibilityForFilteredItems","surveyDetails","tsUnlockDate","parseISO","tsExpiryDate","isPast","deriveSurveyStatus","includes","isFilteredOutByStatus","sort","b","compareDesc","ListSurveysView","Component","parameterKey","defaultValue","defaultValueSerialized","location","useLocation","queryParams","URLSearchParams","search","valueSerialized","get","Error","parameterValue","parse","updateParameterValue","newValue","set","pathname","toString","warn","withSearchParameter","displayOptions","updateDisplayOptions","displayableSurveys","statusFilterView","options","updateOptions","surveyStatuses","hiddenStatusesOptions","fontWeight","Group","newValues","useStatusFilterConfigurator","hideFilteredItemsToggle","checked","marginLeft","useHideFilteredItems","extra","PlusCircleOutlined","Panel","header","Boolean","window","hostname","match","ReactDOM","maxWidth","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"mSAEaA,EAAsC,CACjDC,GAAG,UACHC,GAAG,c,yBCQCC,EAAgBC,YAAY,CAChCC,KAAK,WACLC,aAN6B,CAC7BC,OAAO,MAMPC,SAAU,CACRC,qBAAsB,SAACC,EAAOC,GAC5B,OAAO,2BACFD,GADL,IAEEH,OAAQI,EAAOC,cAMRH,EAAyBN,EAAcU,QAAvCJ,qBAEAK,EAAYX,EAAZW,Q,8DClBFC,EAAgB,I,OAAIC,QAFpB,QCHPC,EAAM,IAAIC,KACVC,EAAWC,YAAQH,GCWnBX,EDTyB,WAC7B,IAAMe,EAAaN,EAAcO,QAAQ,CAAEC,IAAK,KAEhDC,QAAQC,IAAR,qBACgBJ,EADhB,+CACiEN,EAAcW,OAI/E,IADA,IAAMC,EAAkB,GACfC,EAAI,EAAGA,EAAIP,EAAYO,IAAK,CACnC,IAAMC,EAAWd,EAAce,KAAK,CAAEC,KAAMZ,IACtCa,EAAWC,YAAQJ,EAAUd,EAAcO,QAAQ,CAAEC,IAAK,OAC1DW,EAAYC,YAAQN,EAAUd,EAAcO,QAAQ,CAAEC,IAAK,MAEjEI,EAAOZ,EAAcqB,QAAU,CAC7BC,MAAOtB,EAAcuB,UACrBJ,UAAWK,YAAUC,YAASN,GAAajB,EAAMiB,GACjDL,SAAUU,YAAUV,GACpBG,SAAUO,YAAUP,IAIxB,OAAOL,ECXLc,GAGEC,EAAetC,YAAY,CAC/BC,KAAK,UACLC,eACAE,SAAU,CACRmC,iBAAkB,SAChBjC,EACAC,GAKI,IAAD,EACmCA,EAAOC,QAArCyB,EADL,EACKA,MAAOR,EADZ,EACYA,SAAUG,EADtB,EACsBA,SAEzB,OAAO,2BACFtB,GADL,kBAEGkC,cAAW,CACVP,QACAH,UAAWK,YAAU,IAAIrB,MACzBW,SAAUU,YAAUV,GACpBG,SAAUO,YAAUP,OAI1Ba,iBAAkB,SAChBnC,EACAC,GAEA,IAAMmC,EAA6B,eAAQpC,GAE3C,cADOoC,EAAqBnC,EAAOC,QAAQmC,UACpCD,GAETE,gBAAiB,WACf,MAAO,O,EASTN,EAAa7B,QAHf8B,E,EAAAA,iBACAE,E,EAAAA,iBACAG,E,EAAAA,gBAGalC,EAAY4B,EAAZ5B,QC5DTmC,EAAcC,YAAgB,CAClCC,SAAUC,EACVC,QAASC,IAKEC,EAAQC,YAAe,CAClC1C,QAASmC,IAGEQ,EAAY,SAAC/C,GAAD,OAAsBA,GAElCgD,EAAiB,SAAChD,GAAD,OAAsBA,EAAMyC,UAE7CQ,EAAmB,SAACjD,GAAD,OAAsBA,EAAM2C,SCT/CO,EAAwC,WAAO,IAClDC,EAAkBC,cAAlBD,cACFE,EAAUC,cACAC,EAAiBC,YAAYR,GAArCnD,OACF4D,EAAaD,YAAYT,GACzBW,EAAWC,cAEjB,OACE,gBAAC,WAAD,KACE,gBAAC,IAAD,CACEC,MAAO,CAAEC,QAAS,EAAGC,aAAc,IACnCnC,MAAOwB,EAAc,CAAEY,GAAG,oBAC1BC,OAAQ,kBAAMX,EAAQY,KAAR,QAGhB,gBAAC,IAAD,KAAad,EAAc,CAAEY,GAAG,qBAChC,gBAAC,IAAD,CACEH,MAAO,CAAEM,MAAM,QACfC,SAAU,SAACC,GAAD,OAAeV,EAAS3D,EAAqBqE,KACvDC,MAAOd,GAENe,OAAOC,QAAQjF,GAASkF,KAAI,mCAAEC,EAAF,KAAaC,EAAb,YAC3B,gBAAC,IAAOC,OAAR,CAAeC,IAAKH,EAAWJ,MAAOI,GACnCC,OAKP,gBAAC,IAAD,CACEG,QAAM,EACNjB,MAAO,CAAEkB,UAAW,IACpBC,QAAS,kBAAMrB,EAASpB,OAEvBa,EAAc,CAAEY,GAAG,4BAGtB,gBAAC,IAAD,MAEA,uBACEH,MAAO,CACLkB,UAAW,GACXE,SAAS,OACTC,gBAAgB,YAChBpB,QAAS,EACTqB,aAAc,EACdC,UAAW,MAGb,2BAAMC,KAAKC,UAAU5B,EAAY,KAAM,O,kBCpDlC6B,EAAkC,WAC7C,IAAMjC,EAAUC,cAEhB,OACE,gBAAC,IAAWiC,MAAZ,CACE3B,MAAO,CACLC,QAAS,GACT2B,OAAQ,EACRC,QAAQ,OACRC,eAAe,gBACfC,WAAW,WAGb,gBAAC,IAAD,CAAMC,GAAE,KACN,gBAAC,IAAD,CAAkB7B,GAAE,cAEtB,gBAAC,IAAD,CACE8B,KAAI,SACJC,MAAK,SACLf,QAAS,kBAAM1B,EAAQY,KAAR,cACf8B,KAAM,gBAACC,EAAA,EAAD,U,uDCtBDC,GAAmBC,YAAqBC,MCIxCC,GAA4C,WAAO,IACtDjD,EAAkBC,cAAlBD,cACFE,EAAUC,cACVI,EAAWC,cAH4C,EAIzB0C,aAJyB,mBAItDC,EAJsD,KAI1CC,EAJ0C,OAK3BF,aAL2B,mBAKtDG,EALsD,KAK3CC,EAL2C,OAM/BJ,aAN+B,mBAMtDK,EANsD,KAM7CC,EAN6C,KAQvDC,EAA0BzD,EAAc,CAC5CY,GAAG,2BAGL,OACE,gBAAC,WAAD,KACE,gBAAC,IAAD,CACEH,MAAO,CAAEC,QAAS,EAAGC,aAAc,IACnCnC,MAAOwB,EAAc,CAAEY,GAAG,yBAC1BC,OAAQ,kBAAMX,EAAQY,KAAR,QAGhB,gBAAC,IAAD,CACE4C,SAAU,WACRnD,EACEzB,EAAiB,CACfN,MAAO2E,EACPnF,SAAUqF,EACVlF,SAAUoF,KAIdrD,EAAQY,KAAR,mBAGF,gBAAC,IAAK6C,KAAN,CACEC,MAAO5D,EAAc,CAAEY,GAAG,8BAC1BpE,KAAI,eACJqH,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAASN,KAEnC,gBAAC,IAAD,CACEvC,MAAOiC,EACPnC,SAAU,SAACgD,GAAD,OAAOZ,EAAcY,EAAEC,cAAc/C,WAInD,gBAAC,IAAKyC,KAAN,CACEC,MAAO5D,EAAc,CAAEY,GAAG,mCAC1BpE,KAAI,oBACJqH,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAASN,KAEnC,gBAACX,GAAiBoB,YAAlB,CACEC,iBAAkB,SAACC,GACjB,IAAMC,EAAiB,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAgB,GACpCE,EAAe,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAgB,GAEpCC,GACFf,EAAae,GAGXC,GACFd,EAAWc,OAMnB,gBAAC,IAAKX,KAAN,KACE,gBAAC,IAAD,CAAQjB,KAAI,UAAa6B,SAAQ,UAC9BvE,EAAc,CAAEY,GAAG,8B,yCCzEnB4D,GAAmC,WAE9C,OAAO,0CCGHC,GAAqB,SAAC/H,GAC1B,OAAQA,GACN,IAAI,KACF,OAAO,kCACT,QACE,OAAO,oCAIAgI,GAAuC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7CjI,EAAW2D,YAAYR,GAAvBnD,OAD4D,EAEpCwG,aAFoC,mBAE7D0B,EAF6D,KAEnDC,EAFmD,KAWpE,OAPA3B,aAAgB,WACd,wBAAC,6BAAA4B,EAAA,sEAC8BL,GAAmB/H,GADjD,OACOqI,EADP,OAECF,EAAYE,EAAeC,SAF5B,0CAAD,KAIC,CAACtI,IAEAkI,EAEA,gBAAC,KAAD,CACEA,SAAUA,EACVlI,OAAQA,EACRuI,cAAa,KACbC,QAAS,SAACC,GAER,GAAI,wBAAAA,EAAIC,KAIR,MAAMD,IAGPR,GAKA,gBAAC,GAAD,O,6FC1CIU,GAER,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEAC,GAASvF,EADWC,cAAlBD,eACqB,CAAEY,GAAG,YAFZ,EAGcsC,WAAuBqC,GAHrC,mBAGfC,EAHe,KAGHC,EAHG,KAKhBC,EAA0BxC,eAAkB,WAChDuC,EACEE,aAA0BL,EAAW,CACnCM,WAAW,OAGd,CAACN,IAUJ,OARApC,aAAgB,WACdwC,IAGA,IAAMG,EAAWC,YAAYJ,EAAyB,KACtD,OAAO,kBAAMK,cAAcF,MAC1B,CAACH,IAEG,gBAAC,KAAD,CAASlH,MAAOwH,aAAcV,IAAaE,I,UCpBvCS,GAER,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACA3F,EAAWC,cAEjB,MAAI,QAAA0F,EAAOC,OAEP,gBAAC,IAAD,CACEzE,QAAM,EACN0E,KAAI,QACJxD,KAAM,gBAACyD,GAAA,EAAD,CAAgB5F,MAAO,CAAE6F,YAAa,KAC5CC,SAAU,SAAAL,EAAOM,WACjB5E,QAAS,kBAAMrB,EAASvB,EAAiB,CAAEE,SAAUgH,EAAOO,SAE5D,gBAAC,IAAD,CAAkB7F,GAAE,sCAKnB,M,UCtBI8F,GAA8B,WAGrC,IACI1G,EAAkBC,cAAlBD,cAER,MAAO,CACL2G,IAAK3G,EAAc,CAAEY,GAAG,sBACxB,cAAeZ,EAAc,CAAEY,GAAG,8BAClCgG,UAAW5G,EAAc,CAAEY,GAAG,8BCH5BiG,GAAoB,SACxBL,EACAM,GAEA,MAAc,SAAVN,EACK,CACLO,MAAO,CACLC,QAAS,EACTC,QAAS,IAKD,gBAAVT,EACK,uBAAK/F,MAAO,CAAEyG,QAAS,KAAQJ,GAGjCA,GAGHK,GAED,SAAC,GAAsB,IAItBC,EAJEC,EAAmB,EAAnBA,aAGFC,EAA2B,UAEzBC,EAJqBb,KAIOW,GAElC,OAAQA,GACN,IAAI,cACFC,EAAQ,aACRF,EAAU,gBAACI,GAAA,EAAD,CAAcC,MAAI,IAC5B,MACF,IAAI,YACFH,EAAQ,UACRF,EAAU,gBAACM,GAAA,EAAD,MAId,OACE,gBAAC,KAAD,CAAKC,MAAOL,EAAU1E,KAAMwE,GACzBG,IAKMK,GAER,SAAC,GAAiB,IAAfpI,EAAc,EAAdA,QACEQ,EAAkBC,cAAlBD,cAEF6H,EAA0C,CAC9C,CACErJ,MAAOwB,EAAc,CAAEY,GAAG,8BAC1BkH,UAAW,QACXC,OAAQ,SAACvJ,EAAOwJ,GAAR,OAAmBnB,GAAkBmB,EAAOxB,WAAYhI,KAElE,CACEA,MAAOwB,EAAc,CAAEY,GAAG,sCAC1BkH,UAAW,YACXC,OAAQ,SAAC1J,EAAW2J,GAAZ,OACNnB,GACEmB,EAAOxB,WACP,gBAAC,GAAD,CAAmBlB,UAAWjH,OAGpC,CACEG,MAAOwB,EAAc,CAAEY,GAAG,+BAC1BkH,UAAW,SACXC,OAAQ,SAACV,EAAcW,GAAf,OACNnB,GACEmB,EAAOxB,WACP,gBAAC,GAAD,CAAYa,aAAcA,OAGhC,CACE7I,MAAOwB,EAAc,CAAEY,GAAG,oCAC1BkH,UAAW,WACXC,OAAQ,SAAC/J,EAAUgK,GAAX,OACNnB,GACEmB,EAAOxB,WACP,gBAAC,GAAD,CAAmBlB,UAAWtH,OAGpC,CACEQ,MAAOwB,EAAc,CAAEY,GAAG,oCAC1BkH,UAAW,WACXC,OAAQ,SAAC5J,EAAU6J,GAAX,OACNnB,GACEmB,EAAOxB,WACP,gBAAC,GAAD,CAAmBlB,UAAWnH,OAGpC,CACEK,MAAOwB,EAAc,CAAEY,GAAG,gCAC1BmH,OAAQ,SAACE,EAAGD,GAAJ,OACNnB,GAAkBmB,EAAOxB,WAAY,gBAAC,GAAD,CAAeN,OAAQ8B,QAIlE,OACE,gBAAC,KAAD,CACEE,OAAM,MACNL,QAASA,EACTM,WAAY3I,EACZ4I,OAAQ,CAAEC,GAAG,GACbjC,KAAI,QACJkC,UAAU,K,oBCnFHC,GAAwB,SAAC,GAGW,IAF/CC,EAE8C,EAF9CA,aACAC,EAC8C,EAD9CA,eAEMjJ,EAAUa,YAAYP,GACtB4I,EAA+CF,EAAY,qBA+BjE,OA3BwBrH,OAAOC,QAAQ5B,GAAS6B,KAC9C,YAAgC,IAAD,mBAA7BnC,EAA6B,KAAnByJ,EAAmB,KACrBnK,EAAyCmK,EAAzCnK,MAAOH,EAAkCsK,EAAlCtK,UAAWL,EAAuB2K,EAAvB3K,SAAUG,EAAawK,EAAbxK,SAE9ByK,EAAeC,aAAS7K,GACxB8K,EAAeD,aAAS1K,GAExBkJ,EFlCsB,SAChCrJ,EACAG,GAEA,OAAI4K,aAAO5K,GACH,YAGJ4K,aAAO/K,GACH,cAGF,MEsBmBgL,CAAmBJ,EAAcE,GAClDtC,EAA4B,OAOhC,OANIiC,GA7BoB,SAC5BpB,EACAoB,GAEA,QAAIA,GACKA,EAAeQ,SAAS5B,GAyBvB6B,CAAsB7B,EAAcoB,KACtCjC,EAAakC,GAIV,CACLjC,IAAKvH,EACLV,QACAH,UAAWwK,aAASxK,GACpBL,SAAU4K,EACVzK,SAAU2K,EACV3C,OAAQkB,EACRb,iBAKiB2C,MAAK,SAACrE,EAAGsE,GAAJ,OAAUC,aAAYvE,EAAEzG,UAAW+K,EAAE/K,e,oBCRtDiL,GC7DN,SACLC,EAIAC,EACAC,GAEA,IAAMC,EAAyBzH,KAAKC,UAAUuH,GAE9C,OAAO,WACL,IAAME,EAAWC,cACX1J,EAAUC,cACV0J,EAAc,IAAIC,gBAAgBH,EAASI,QAOjD,IACE,IAAMC,EAAkBH,EAAYI,IAAIT,GAExC,GAAwB,OAApBQ,EACF,MAAM,IAAIE,MAAJ,mCACwBV,EADxB,sEACkGE,EADlG,OAKR,IAAMS,EAAiBlI,KAAKmI,MAAMJ,GAElC,OACE,gBAACT,EAAD,CACEY,eAAgBA,EAChBE,qBAnBuB,SAACC,GAC5BT,EAAYU,IAAIf,EAAcvH,KAAKC,UAAUoI,IAC7CpK,EAAQY,KAAR,UAAgB6I,EAASa,SAAzB,YAAqCX,EAAYY,gBAoBjD,MAAOzG,GAIP,OAHArG,QAAQ+M,KAAK1G,GAEb6F,EAAYU,IAAIf,EAAcE,GAE5B,gBAAC,IAAD,CACEjH,GAAI,CACF+H,SAAUb,EAASa,SACnBT,OAAQF,EAAYY,gBDgBDE,EAlD1B,SAAC,GAGC,IAFWC,EAEZ,EAFJT,eACsBU,EAClB,EADJR,qBAEMnK,EAAUC,cACRH,EAAkBC,cAAlBD,cACF8K,EAAqBvC,GAAsBqC,GACzCG,EEfiC,SACzCC,EACAC,GACI,IACIjL,EAAkBC,cAAlBD,cACFkL,EAAiBxE,KACjByE,EAAwBhK,OAAOC,QAAQ8J,GAAgB7J,KAC3D,yCAAqC,CACnCH,MADF,KAEE0C,MAFF,SAyBF,MAAO,CACLmH,iBAnBA,gBAAC,WAAD,KACE,gBAAC,IAAD,CAAYtK,MAAO,CAAEE,aAAc,EAAGyK,WAAW,SAC9CpL,EAAc,CAAEY,GAAG,uCAGtB,gBAAC,KAASyK,MAAV,CACEL,QAASG,EACT1B,aAAcuB,EAAQvC,eACtBzH,SAAU,SAACsK,GAAD,OACRL,EAAc,2BACTD,GADQ,IAEXvC,eAAgB6C,UFVGC,CAC3BX,EACAC,GAFME,iBAIAS,EGpB0B,SAClCR,EACAC,GACI,IACIjL,EAAkBC,cAAlBD,cAmBR,MAAO,CAAEwL,wBAhBP,yBAAO/K,MAAO,CAAE6B,QAAQ,SACtB,gBAAC,KAAD,CACEmJ,QAAST,EAAQxC,eAAgB,EACjCxH,SAAU,SAACsJ,GAAD,OACRW,EAAc,2BACTD,GADQ,IAEXxC,aAAc8B,QAIpB,gBAAC,IAAD,CAAY7J,MAAO,CAAEiL,WAAY,KAC9B1L,EAAc,CAAEY,GAAG,8CHEU+K,CAClCf,EACAC,GAFMW,wBAKR,OACE,gBAAC,WAAD,KACE,gBAAC,IAAD,CACE/K,MAAO,CAAEC,QAAS,EAAGC,aAAc,IACnCnC,MAAOwB,EAAc,CAAEY,GAAG,wBAC1BgL,MACE,gBAAC,IAAD,CACElJ,KAAI,UACJE,KAAM,gBAACiJ,GAAA,EAAD,MACNjK,QAAS,kBAAM1B,EAAQY,KAAR,oBAEdd,EAAc,CAAEY,GAAG,4BAK1B,gBAAC,KAAD,KACE,gBAAC,KAASkL,MAAV,CACEC,OAAQ/L,EAAc,CAAEY,GAAG,wCAC3Ba,IAAG,mBAEFsJ,EACD,gBAAC,IAAD,MACCS,IAIL,uBAAK/K,MAAO,CAAEkB,UAAW,KACvB,gBAAC,GAAD,CAAcnC,QAASsL,QAMmB,UAGhD,IIvDkBkB,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCLNC,IAASrE,OACP,kBAAC,IAAD,CAAUrI,MAAOA,GACf,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,yBAAKe,MAAO,CAAE4L,SAAU,IAAKhK,OAAO,SAClC,kBAAC,EAAD,MAEA,yBAAK5B,MAAO,CAAEC,QAAS,GAAImB,SAAS,SAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyK,OAAK,EAACC,KAAI,aACf,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAI,kBACf,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAI,iBACf,kBAACjD,GAAD,OAGF,kBAAC,IAAD,CAAOiD,KAAK,KACV,kBAAC,IAAD,CAAU9J,GAAE,yBAQ1B+J,SAASC,eAAe,SD6FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNtP,QAAQsP,MAAMA,EAAMlJ,c","file":"static/js/main.de13ce1e.chunk.js","sourcesContent":["export type LOCALE_KEY = `en` | `es`;\n\nexport const LOCALES: Record<LOCALE_KEY, string> = {\n  en: `English`,\n  es: `Español`,\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LOCALE_KEY } from '../i18n/locale';\n\n// TODO Add toggle for dark-mode.\ninterface Settings {\n  locale: LOCALE_KEY;\n}\n\nconst initialState: Settings = {\n  locale: `en`,\n};\n\nconst settingsSlice = createSlice({\n  name: `settings`,\n  initialState,\n  reducers: {\n    settingsUpdateLocale: (state, action: PayloadAction<LOCALE_KEY>) => {\n      return {\n        ...state,\n        locale: action.payload,\n      };\n    },\n  },\n});\n\nexport const { settingsUpdateLocale } = settingsSlice.actions;\n\nexport const { reducer } = settingsSlice;\n","import { Chance } from 'chance';\n\n// const seed = (() => {\n//   const seedMin = Math.ceil(0);\n//   const seedMax = Math.floor(Math.pow(2, 20));\n//   return Math.floor(Math.random() * (seedMax - seedMin + 1) + seedMin);\n// })();\nconst seed = 350287;\n\nexport const dataGenerator = new Chance(seed);\n","import { addDays, formatISO, getYear, isFuture, subDays } from 'date-fns';\nimport { Surveys } from '../store/surveys';\nimport { dataGenerator } from './dataGenerator';\n\nconst now = new Date();\nconst thisYear = getYear(now);\n\nexport const generateSurveys = (): Surveys => {\n  const numSurveys = dataGenerator.natural({ max: 25 });\n\n  console.log(\n    `Generating ${numSurveys} surveys with the following seed... ${dataGenerator.seed}`\n  );\n\n  const output: Surveys = {};\n  for (let i = 0; i < numSurveys; i++) {\n    const tsUnlock = dataGenerator.date({ year: thisYear }) as Date;\n    const tsExpiry = addDays(tsUnlock, dataGenerator.natural({ max: 100 }));\n    const tsCreated = subDays(tsUnlock, dataGenerator.natural({ max: 25 }));\n\n    output[dataGenerator.guid()] = {\n      title: dataGenerator.company(),\n      tsCreated: formatISO(isFuture(tsCreated) ? now : tsCreated),\n      tsUnlock: formatISO(tsUnlock),\n      tsExpiry: formatISO(tsExpiry),\n    };\n  }\n\n  return output;\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { formatISO } from 'date-fns';\nimport { v4 as uuidv4 } from 'uuid';\nimport { generateSurveys } from '../_debug/generateSurveys';\n\nexport type SurveyId = string;\n\ninterface Survey {\n  title: string;\n  tsCreated: string;\n  tsUnlock: string;\n  tsExpiry: string;\n}\n\nexport type Surveys = Record<SurveyId, Survey>;\n\nconst initialState: Surveys = process.env.REACT_APP_DEMO_MODE\n  ? generateSurveys()\n  : {};\n\nconst surveysSlice = createSlice({\n  name: `surveys`,\n  initialState,\n  reducers: {\n    surveysCreateOne: (\n      state,\n      action: PayloadAction<{\n        title: string;\n        tsUnlock: Date;\n        tsExpiry: Date;\n      }>\n    ) => {\n      const { title, tsUnlock, tsExpiry } = action.payload;\n\n      return {\n        ...state,\n        [uuidv4()]: {\n          title,\n          tsCreated: formatISO(new Date()),\n          tsUnlock: formatISO(tsUnlock),\n          tsExpiry: formatISO(tsExpiry),\n        },\n      };\n    },\n    surveysDeleteOne: (\n      state,\n      action: PayloadAction<{ surveyId: SurveyId }>\n    ) => {\n      const updatedListOfSurveys: Surveys = { ...state };\n      delete updatedListOfSurveys[action.payload.surveyId];\n      return updatedListOfSurveys;\n    },\n    surveysClearAll: () => {\n      return {};\n    },\n  },\n});\n\nexport const {\n  surveysCreateOne,\n  surveysDeleteOne,\n  surveysClearAll,\n} = surveysSlice.actions;\n\nexport const { reducer } = surveysSlice;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { reducer as settingsReducer } from './settings';\nimport { reducer as surveysReducer } from './surveys';\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer,\n  surveys: surveysReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport const selectAll = (state: RootState) => state;\n\nexport const selectSettings = (state: RootState) => state.settings;\n\nexport const selectAllSurveys = (state: RootState) => state.surveys;\n","import { Button, Divider, PageHeader, Select, Typography } from 'antd';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { LOCALES } from '../i18n/locale';\nimport { selectAll, selectSettings } from '../store/root';\nimport { settingsUpdateLocale } from '../store/settings';\nimport { surveysClearAll } from '../store/surveys';\n\nexport const SettingsView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const history = useHistory();\n  const { locale: activeLocale } = useSelector(selectSettings);\n  const storeState = useSelector(selectAll);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        style={{ padding: 0, marginBottom: 32 }}\n        title={formatMessage({ id: `settings.header` })}\n        onBack={() => history.push(`/`)}\n      />\n\n      <Typography>{formatMessage({ id: `settings.locale` })}</Typography>\n      <Select\n        style={{ width: `100%` }}\n        onChange={(newLocale) => dispatch(settingsUpdateLocale(newLocale))}\n        value={activeLocale}\n      >\n        {Object.entries(LOCALES).map(([localeKey, localeDescription]) => (\n          <Select.Option key={localeKey} value={localeKey}>\n            {localeDescription}\n          </Select.Option>\n        ))}\n      </Select>\n\n      <Button\n        danger\n        style={{ marginTop: 32 }}\n        onClick={() => dispatch(surveysClearAll())}\n      >\n        {formatMessage({ id: `settings.clear-surveys` })}\n      </Button>\n\n      <Divider />\n\n      <div\n        style={{\n          marginTop: 32,\n          overflow: `auto`,\n          backgroundColor: `lightgrey`,\n          padding: 8,\n          borderRadius: 8,\n          maxHeight: 500,\n        }}\n      >\n        <pre>{JSON.stringify(storeState, null, 2)}</pre>\n      </div>\n    </React.Fragment>\n  );\n};\n","import { SettingOutlined } from '@ant-design/icons';\nimport { Button, Typography } from 'antd';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link, useHistory } from 'react-router-dom';\n\nexport const TopBar: React.FunctionComponent = () => {\n  const history = useHistory();\n\n  return (\n    <Typography.Title\n      style={{\n        padding: 16,\n        margin: 0,\n        display: `flex`,\n        justifyContent: `space-between`,\n        alignItems: `center`,\n      }}\n    >\n      <Link to={`/`}>\n        <FormattedMessage id={`app-name`} />\n      </Link>\n      <Button\n        type={`dashed`}\n        shape={`circle`}\n        onClick={() => history.push(`/settings`)}\n        icon={<SettingOutlined />}\n      />\n    </Typography.Title>\n  );\n};\n","import generatePicker from 'antd/es/date-picker/generatePicker';\nimport 'antd/es/date-picker/style/index';\nimport dateFnsGenerateConfig from 'rc-picker/lib/generate/dateFns';\n\nexport const CustomDatePicker = generatePicker<Date>(dateFnsGenerateConfig);\n","import { Button, Form, Input, PageHeader } from 'antd';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { CustomDatePicker } from '../base/CustomDatePicker';\nimport { surveysCreateOne } from '../store/surveys';\n\nexport const CreateSurveyView: React.FunctionComponent = () => {\n  const { formatMessage } = useIntl();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [titleValue, setTitleValue] = React.useState<string>();\n  const [startDate, setStartDate] = React.useState<Date>();\n  const [endDate, setEndDate] = React.useState<Date>();\n\n  const fieldRequiredWarningMsg = formatMessage({\n    id: `field-required-warning`,\n  });\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        style={{ padding: 0, marginBottom: 32 }}\n        title={formatMessage({ id: `create-survey.header` })}\n        onBack={() => history.push(`/`)}\n      />\n\n      <Form\n        onFinish={() => {\n          dispatch(\n            surveysCreateOne({\n              title: titleValue!,\n              tsUnlock: startDate!,\n              tsExpiry: endDate!,\n            })\n          );\n\n          history.push(`/list-surveys`);\n        }}\n      >\n        <Form.Item\n          label={formatMessage({ id: `create-survey.title-label` })}\n          name={`survey-title`}\n          rules={[{ required: true, message: fieldRequiredWarningMsg }]}\n        >\n          <Input\n            value={titleValue}\n            onChange={(e) => setTitleValue(e.currentTarget.value)}\n          />\n        </Form.Item>\n\n        <Form.Item\n          label={formatMessage({ id: `create-survey.date-range-label` })}\n          name={`survey-date-range`}\n          rules={[{ required: true, message: fieldRequiredWarningMsg }]}\n        >\n          <CustomDatePicker.RangePicker\n            onCalendarChange={(selectedRange) => {\n              const selectedStartDate = selectedRange?.[0];\n              const selectedEndDate = selectedRange?.[1];\n\n              if (selectedStartDate) {\n                setStartDate(selectedStartDate);\n              }\n\n              if (selectedEndDate) {\n                setEndDate(selectedEndDate);\n              }\n            }}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type={`primary`} htmlType={`submit`}>\n            {formatMessage({ id: `create-survey.submit` })}\n          </Button>\n        </Form.Item>\n      </Form>\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\n\nexport const Loading: React.FunctionComponent = () => {\n  // NOTE We don't want to use internationalized messages here since this component may be rendered before those messages are loaded!\n  return <div>{`Loading...`}</div>;\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Loading } from '../base/Loading';\nimport { selectSettings } from '../store/root';\nimport { LOCALE_KEY } from './locale';\n\nconst loadLocaleMessages = (locale: LOCALE_KEY) => {\n  switch (locale) {\n    case `es`:\n      return import('./es.json');\n    default:\n      return import('./en.json');\n  }\n};\n\nexport const IntlWrapper: React.FunctionComponent = ({ children }) => {\n  const { locale } = useSelector(selectSettings);\n  const [messages, setMessages] = React.useState<Record<string, string>>();\n\n  React.useEffect(() => {\n    (async () => {\n      const loadedMessages = await loadLocaleMessages(locale);\n      setMessages(loadedMessages.default);\n    })();\n  }, [locale]);\n\n  if (messages) {\n    return (\n      <IntlProvider\n        messages={messages}\n        locale={locale}\n        defaultLocale={`en`}\n        onError={(err) => {\n          // TODO Re-enable errors for missing translations.\n          if (err.code === `MISSING_TRANSLATION`) {\n            return;\n          }\n\n          throw err;\n        }}\n      >\n        {children}\n      </IntlProvider>\n    );\n  }\n\n  return <Loading />;\n};\n","import { Tooltip } from 'antd';\nimport { formatDistanceToNowStrict, formatRFC7231 } from 'date-fns';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nexport const RelativeTimestamp: React.FunctionComponent<{\n  timestamp: Date;\n}> = ({ timestamp }) => {\n  const { formatMessage } = useIntl();\n  const emDash = formatMessage({ id: `em-dash` });\n  const [tsRelative, setTsRelative] = React.useState<string>(emDash);\n\n  const updateRelativeTimestamp = React.useCallback(() => {\n    setTsRelative(\n      formatDistanceToNowStrict(timestamp, {\n        addSuffix: true,\n      })\n    );\n  }, [timestamp]);\n\n  React.useEffect(() => {\n    updateRelativeTimestamp();\n\n    // Periodically update the relative timestamp:\n    const interval = setInterval(updateRelativeTimestamp, 1000);\n    return () => clearInterval(interval);\n  }, [updateRelativeTimestamp]);\n\n  return <Tooltip title={formatRFC7231(timestamp)}>{tsRelative}</Tooltip>;\n};\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { surveysDeleteOne } from '../store/surveys';\nimport { DisplayableSurvey } from './useDisplayableSurveys';\n\nexport const SurveyActions: React.FunctionComponent<{\n  survey: DisplayableSurvey;\n}> = ({ survey }) => {\n  const dispatch = useDispatch();\n\n  if (survey.status === `new`) {\n    return (\n      <Button\n        danger\n        size={`small`}\n        icon={<DeleteOutlined style={{ marginRight: 8 }} />}\n        disabled={survey.visibility !== `show`}\n        onClick={() => dispatch(surveysDeleteOne({ surveyId: survey._id }))}\n      >\n        <FormattedMessage id={`list-surveys.action-delete-label`} />\n      </Button>\n    );\n  }\n\n  return null;\n};\n","import { isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nexport type SURVEY_STATUS_KEY = `new` | `in-progress` | `completed`;\n\nexport const useSurveyStatusDescriptions = (): Record<\n  SURVEY_STATUS_KEY,\n  string\n> => {\n  const { formatMessage } = useIntl();\n\n  return {\n    new: formatMessage({ id: `survey-status.new` }),\n    'in-progress': formatMessage({ id: `survey-status.in-progress` }),\n    completed: formatMessage({ id: `survey-status.completed` }),\n  };\n};\n\nexport const deriveSurveyStatus = (\n  tsUnlock: Date,\n  tsExpiry: Date\n): SURVEY_STATUS_KEY => {\n  if (isPast(tsExpiry)) {\n    return `completed`;\n  }\n\n  if (isPast(tsUnlock)) {\n    return `in-progress`;\n  }\n\n  return `new`;\n};\n","import { CheckCircleOutlined, SyncOutlined } from '@ant-design/icons';\nimport { Table, Tag } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { TagProps } from 'antd/lib/tag';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { RelativeTimestamp } from '../base/RelativeTimestamp';\nimport { SurveyActions } from './SurveyActions';\nimport { SURVEY_STATUS_KEY, useSurveyStatusDescriptions } from './surveyStatus';\nimport { DisplayableSurvey, SurveyVisibility } from './useDisplayableSurveys';\n\nconst visibilityWrapper = (\n  visibility: SurveyVisibility,\n  content: React.ReactNode\n) => {\n  if (visibility === `hide`) {\n    return {\n      props: {\n        rowSpan: 0,\n        colSpan: 0,\n      },\n    };\n  }\n\n  if (visibility === `deemphasize`) {\n    return <div style={{ opacity: 0.2 }}>{content}</div>;\n  }\n\n  return content;\n};\n\nconst StatusCell: React.FunctionComponent<{\n  surveyStatus: SURVEY_STATUS_KEY;\n}> = ({ surveyStatus }) => {\n  const statusDescriptions = useSurveyStatusDescriptions();\n\n  let tagColor: TagProps['color'] = `warning`;\n  let tagIcon: React.ReactNode;\n  const tagMsg = statusDescriptions[surveyStatus];\n\n  switch (surveyStatus) {\n    case `in-progress`:\n      tagColor = `processing`;\n      tagIcon = <SyncOutlined spin />;\n      break;\n    case `completed`:\n      tagColor = `success`;\n      tagIcon = <CheckCircleOutlined />;\n      break;\n  }\n\n  return (\n    <Tag color={tagColor} icon={tagIcon}>\n      {tagMsg}\n    </Tag>\n  );\n};\n\nexport const SurveysTable: React.FunctionComponent<{\n  surveys: Array<DisplayableSurvey>;\n}> = ({ surveys }) => {\n  const { formatMessage } = useIntl();\n\n  const columns: ColumnsType<DisplayableSurvey> = [\n    {\n      title: formatMessage({ id: `list-surveys.title-header` }),\n      dataIndex: 'title',\n      render: (title, record) => visibilityWrapper(record.visibility, title),\n    },\n    {\n      title: formatMessage({ id: `list-surveys.creation-date-header` }),\n      dataIndex: 'tsCreated',\n      render: (tsCreated, record) =>\n        visibilityWrapper(\n          record.visibility,\n          <RelativeTimestamp timestamp={tsCreated} />\n        ),\n    },\n    {\n      title: formatMessage({ id: `list-surveys.status-header` }),\n      dataIndex: 'status',\n      render: (surveyStatus, record) =>\n        visibilityWrapper(\n          record.visibility,\n          <StatusCell surveyStatus={surveyStatus} />\n        ),\n    },\n    {\n      title: formatMessage({ id: `list-surveys.unlock-date-header` }),\n      dataIndex: 'tsUnlock',\n      render: (tsUnlock, record) =>\n        visibilityWrapper(\n          record.visibility,\n          <RelativeTimestamp timestamp={tsUnlock} />\n        ),\n    },\n    {\n      title: formatMessage({ id: `list-surveys.expiry-date-header` }),\n      dataIndex: 'tsExpiry',\n      render: (tsExpiry, record) =>\n        visibilityWrapper(\n          record.visibility,\n          <RelativeTimestamp timestamp={tsExpiry} />\n        ),\n    },\n    {\n      title: formatMessage({ id: `list-surveys.actions-header` }),\n      render: (_, record) =>\n        visibilityWrapper(record.visibility, <SurveyActions survey={record} />),\n    },\n  ];\n\n  return (\n    <Table\n      rowKey={`_id`}\n      columns={columns}\n      dataSource={surveys}\n      scroll={{ x: true }}\n      size={`small`}\n      bordered={true}\n    />\n  );\n};\n","import { compareDesc, parseISO } from 'date-fns';\nimport { useSelector } from 'react-redux';\nimport { selectAllSurveys } from '../store/root';\nimport { SurveyId } from '../store/surveys';\nimport { deriveSurveyStatus, SURVEY_STATUS_KEY } from './surveyStatus';\n\nexport type StatusFilter = Array<SURVEY_STATUS_KEY>;\n\nexport interface DisplayOptions {\n  hideFiltered?: boolean;\n  hiddenStatuses?: StatusFilter;\n}\n\nexport type SurveyVisibility = `show` | `hide` | `deemphasize`;\n\nexport interface DisplayableSurvey {\n  _id: SurveyId;\n  title: string;\n  tsCreated: Date;\n  tsUnlock: Date;\n  tsExpiry: Date;\n  status: SURVEY_STATUS_KEY;\n  visibility: SurveyVisibility;\n}\n\nconst isFilteredOutByStatus = (\n  surveyStatus: SURVEY_STATUS_KEY,\n  hiddenStatuses?: StatusFilter\n) => {\n  if (hiddenStatuses) {\n    return hiddenStatuses.includes(surveyStatus);\n  }\n\n  return false;\n};\n\nexport const useDisplayableSurveys = ({\n  hideFiltered,\n  hiddenStatuses,\n}: DisplayOptions): Array<DisplayableSurvey> => {\n  const surveys = useSelector(selectAllSurveys);\n  const visibilityForFilteredItems: SurveyVisibility = hideFiltered\n    ? `hide`\n    : `deemphasize`;\n\n  const unsortedSurveys = Object.entries(surveys).map(\n    ([surveyId, surveyDetails]) => {\n      const { title, tsCreated, tsUnlock, tsExpiry } = surveyDetails;\n\n      const tsUnlockDate = parseISO(tsUnlock);\n      const tsExpiryDate = parseISO(tsExpiry);\n\n      const surveyStatus = deriveSurveyStatus(tsUnlockDate, tsExpiryDate);\n      let visibility: SurveyVisibility = `show`;\n      if (hiddenStatuses) {\n        if (isFilteredOutByStatus(surveyStatus, hiddenStatuses)) {\n          visibility = visibilityForFilteredItems;\n        }\n      }\n\n      return {\n        _id: surveyId,\n        title,\n        tsCreated: parseISO(tsCreated),\n        tsUnlock: tsUnlockDate,\n        tsExpiry: tsExpiryDate,\n        status: surveyStatus,\n        visibility,\n      };\n    }\n  );\n\n  return unsortedSurveys.sort((a, b) => compareDesc(a.tsCreated, b.tsCreated));\n};\n","import { PlusCircleOutlined } from '@ant-design/icons';\nimport { Button, Collapse, Divider, PageHeader } from 'antd';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { withSearchParameter } from '../base/withSearchParameter';\nimport { SurveysTable } from './SurveysTable';\nimport { DisplayOptions, useDisplayableSurveys } from './useDisplayableSurveys';\nimport { useHideFilteredItems } from './useHideFilteredItemsConfigurator';\nimport { useStatusFilterConfigurator } from './useStatusFilterConfigurator';\n\nconst ViewActual: React.FunctionComponent<{\n  parameterValue: DisplayOptions;\n  updateParameterValue: (newValue: DisplayOptions) => void;\n}> = ({\n  parameterValue: displayOptions,\n  updateParameterValue: updateDisplayOptions,\n}) => {\n  const history = useHistory();\n  const { formatMessage } = useIntl();\n  const displayableSurveys = useDisplayableSurveys(displayOptions);\n  const { statusFilterView } = useStatusFilterConfigurator(\n    displayOptions,\n    updateDisplayOptions\n  );\n  const { hideFilteredItemsToggle } = useHideFilteredItems(\n    displayOptions,\n    updateDisplayOptions\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        style={{ padding: 0, marginBottom: 32 }}\n        title={formatMessage({ id: `list-surveys.header` })}\n        extra={\n          <Button\n            type={`primary`}\n            icon={<PlusCircleOutlined />}\n            onClick={() => history.push(`/create-survey`)}\n          >\n            {formatMessage({ id: `create-survey.header` })}\n          </Button>\n        }\n      />\n\n      <Collapse>\n        <Collapse.Panel\n          header={formatMessage({ id: `list-surveys.display-options-header` })}\n          key={`display-options`}\n        >\n          {statusFilterView}\n          <Divider />\n          {hideFilteredItemsToggle}\n        </Collapse.Panel>\n      </Collapse>\n\n      <div style={{ marginTop: 16 }}>\n        <SurveysTable surveys={displayableSurveys} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport const ListSurveysView = withSearchParameter<DisplayOptions>(\n  ViewActual,\n  `display`,\n  {}\n);\n","import * as React from 'react';\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\n\nexport function withSearchParameter<T>(\n  Component: React.FunctionComponent<{\n    parameterValue: T;\n    updateParameterValue: (newValue: T) => void;\n  }>,\n  parameterKey: string,\n  defaultValue: T\n): React.FunctionComponent {\n  const defaultValueSerialized = JSON.stringify(defaultValue);\n\n  return () => {\n    const location = useLocation();\n    const history = useHistory();\n    const queryParams = new URLSearchParams(location.search);\n\n    const updateParameterValue = (newValue: T) => {\n      queryParams.set(parameterKey, JSON.stringify(newValue));\n      history.push(`${location.pathname}?${queryParams.toString()}`);\n    };\n\n    try {\n      const valueSerialized = queryParams.get(parameterKey);\n\n      if (valueSerialized === null) {\n        throw new Error(\n          `Cannot find a value for \"${parameterKey}\" in the query-parameters; resetting to the default value (${defaultValueSerialized})!`\n        );\n      }\n\n      const parameterValue = JSON.parse(valueSerialized);\n\n      return (\n        <Component\n          parameterValue={parameterValue}\n          updateParameterValue={updateParameterValue}\n        />\n      );\n    } catch (e) {\n      console.warn(e);\n\n      queryParams.set(parameterKey, defaultValueSerialized);\n      return (\n        <Redirect\n          to={{\n            pathname: location.pathname,\n            search: queryParams.toString(),\n          }}\n        />\n      );\n    }\n  };\n}\n","import { Checkbox, Typography } from 'antd';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSurveyStatusDescriptions } from './surveyStatus';\nimport { DisplayOptions, StatusFilter } from './useDisplayableSurveys';\n\nexport const useStatusFilterConfigurator = (\n  options: DisplayOptions,\n  updateOptions: (newValue: DisplayOptions) => void\n) => {\n  const { formatMessage } = useIntl();\n  const surveyStatuses = useSurveyStatusDescriptions();\n  const hiddenStatusesOptions = Object.entries(surveyStatuses).map(\n    ([statusKey, statusDescription]) => ({\n      value: statusKey,\n      label: statusDescription,\n    })\n  );\n\n  const statusFilterView = (\n    <React.Fragment>\n      <Typography style={{ marginBottom: 8, fontWeight: `bold` }}>\n        {formatMessage({ id: `list-surveys.status-filter-header` })}\n      </Typography>\n\n      <Checkbox.Group\n        options={hiddenStatusesOptions}\n        defaultValue={options.hiddenStatuses}\n        onChange={(newValues) =>\n          updateOptions({\n            ...options,\n            hiddenStatuses: newValues as StatusFilter,\n          })\n        }\n      />\n    </React.Fragment>\n  );\n\n  return {\n    statusFilterView,\n  };\n};\n","import { Switch, Typography } from 'antd';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { DisplayOptions } from './useDisplayableSurveys';\n\nexport const useHideFilteredItems = (\n  options: DisplayOptions,\n  updateOptions: (newValue: DisplayOptions) => void\n) => {\n  const { formatMessage } = useIntl();\n\n  const hideFilteredItemsToggle = (\n    <label style={{ display: `flex` }}>\n      <Switch\n        checked={options.hideFiltered || false}\n        onChange={(newValue) =>\n          updateOptions({\n            ...options,\n            hideFiltered: newValue,\n          })\n        }\n      />\n      <Typography style={{ marginLeft: 16 }}>\n        {formatMessage({ id: `list-surveys.hide-filtered-items-label` })}\n      </Typography>\n    </label>\n  );\n\n  return { hideFilteredItemsToggle };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { SettingsView } from './base/SettingsView';\nimport { TopBar } from './base/TopBar';\nimport { CreateSurveyView } from './create-survey/CreateSurveyView';\nimport { IntlWrapper } from './i18n/IntlWrapper';\nimport { ListSurveysView } from './list-surveys/ListSurveysView';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/root';\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlWrapper>\n      <HashRouter>\n        <div style={{ maxWidth: 768, margin: `auto` }}>\n          <TopBar />\n\n          <div style={{ padding: 16, overflow: `auto` }}>\n            <Switch>\n              <Route exact path={`/settings`}>\n                <SettingsView />\n              </Route>\n\n              <Route exact path={`/create-survey`}>\n                <CreateSurveyView />\n              </Route>\n\n              <Route exact path={`/list-surveys`}>\n                <ListSurveysView />\n              </Route>\n\n              <Route path=\"*\">\n                <Redirect to={`/list-surveys`} />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </HashRouter>\n    </IntlWrapper>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}